{"mappings":"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","sources":["<anon>","app.js"],"sourcesContent":["var $6b17f08f738443dc$exports = {};\nlet $6b17f08f738443dc$var$bdg = {\n    data: null,\n    hBal: null,\n    hInc: null,\n    hExp: null,\n    hList: null,\n    hIncomeForm: null,\n    hExpenseForm: null,\n    fIncomeID: null,\n    fIncomeSource: null,\n    fIncomeAmt: null,\n    fExpenseID: null,\n    fExpenseTxt: null,\n    fExpenseAmt: null,\n    fExpenseCategory: null,\n    selectedMonth: null,\n    entries: [],\n    init: ()=>{\n        $6b17f08f738443dc$var$bdg.hBal = document.getElementById(\"balanceAm\");\n        $6b17f08f738443dc$var$bdg.hInc = document.getElementById(\"incomeAm\");\n        $6b17f08f738443dc$var$bdg.hExp = document.getElementById(\"expenseAm\");\n        $6b17f08f738443dc$var$bdg.hList = document.getElementById(\"list\");\n        $6b17f08f738443dc$var$bdg.hIncomeForm = document.getElementById(\"incomeForm\");\n        $6b17f08f738443dc$var$bdg.hExpenseForm = document.getElementById(\"expenseForm\");\n        $6b17f08f738443dc$var$bdg.fIncomeID = document.getElementById(\"incomeFormID\");\n        $6b17f08f738443dc$var$bdg.fIncomeSource = document.getElementById(\"incomeFormSource\");\n        $6b17f08f738443dc$var$bdg.fIncomeAmt = document.getElementById(\"incomeFormAmt\");\n        $6b17f08f738443dc$var$bdg.fExpenseID = document.getElementById(\"expenseFormID\");\n        $6b17f08f738443dc$var$bdg.fExpenseTxt = document.getElementById(\"expenseFormTxt\");\n        $6b17f08f738443dc$var$bdg.fExpenseAmt = document.getElementById(\"expenseFormAmt\");\n        $6b17f08f738443dc$var$bdg.fExpenseCategory = document.getElementById(\"expenseFormCategory\");\n        // Use current month logic from previous solution\n        const monthSelect = document.getElementById(\"monthSelect\");\n        const currentDate = new Date();\n        const currentMonth = currentDate.toLocaleString('default', {\n            month: 'long',\n            year: 'numeric'\n        });\n        const months = [];\n        for(let i = 0; i < 12; i++){\n            const month = new Date(currentDate.getFullYear(), i);\n            const monthString = month.toLocaleString('default', {\n                month: 'long',\n                year: 'numeric'\n            });\n            months.push(monthString);\n        }\n        monthSelect.innerHTML = '';\n        months.forEach((month)=>{\n            const option = document.createElement('option');\n            option.value = month;\n            option.textContent = month;\n            monthSelect.appendChild(option);\n        });\n        monthSelect.value = currentMonth;\n        $6b17f08f738443dc$var$bdg.selectedMonth = currentMonth;\n        monthSelect.addEventListener(\"change\", (e)=>{\n            $6b17f08f738443dc$var$bdg.selectedMonth = e.target.value;\n            $6b17f08f738443dc$var$bdg.draw();\n        });\n        $6b17f08f738443dc$var$bdg.draw(); // Draw entries for the selected month\n    },\n    toggleIncome: (id)=>{\n        console.log(\"Toggle income function called with id:\", id);\n        if (id === false) {\n            $6b17f08f738443dc$var$bdg.fIncomeID.value = \"\";\n            $6b17f08f738443dc$var$bdg.fIncomeSource.value = \"\";\n            $6b17f08f738443dc$var$bdg.fIncomeAmt.value = \"\";\n            $6b17f08f738443dc$var$bdg.hIncomeForm.classList.add(\"hidden\");\n        } else {\n            if (Number.isInteger(id)) {\n                $6b17f08f738443dc$var$bdg.fIncomeID.value = id;\n                $6b17f08f738443dc$var$bdg.fIncomeSource.value = $6b17f08f738443dc$var$bdg.entries[id].source;\n                $6b17f08f738443dc$var$bdg.fIncomeAmt.value = $6b17f08f738443dc$var$bdg.entries[id].a;\n            }\n            $6b17f08f738443dc$var$bdg.hIncomeForm.classList.remove(\"hidden\");\n        }\n    },\n    toggleExpense: (id)=>{\n        console.log(\"Toggle expense function called with id:\", id);\n        if (id === false) {\n            $6b17f08f738443dc$var$bdg.fExpenseID.value = \"\";\n            $6b17f08f738443dc$var$bdg.fExpenseTxt.value = \"\";\n            $6b17f08f738443dc$var$bdg.fExpenseAmt.value = \"\";\n            $6b17f08f738443dc$var$bdg.fExpenseCategory.value = \"needs\";\n            $6b17f08f738443dc$var$bdg.hExpenseForm.classList.add(\"hidden\");\n        } else {\n            if (Number.isInteger(id)) {\n                $6b17f08f738443dc$var$bdg.fExpenseID.value = id;\n                $6b17f08f738443dc$var$bdg.fExpenseTxt.value = $6b17f08f738443dc$var$bdg.entries[id].t;\n                $6b17f08f738443dc$var$bdg.fExpenseAmt.value = $6b17f08f738443dc$var$bdg.entries[id].a;\n                $6b17f08f738443dc$var$bdg.fExpenseCategory.value = $6b17f08f738443dc$var$bdg.entries[id].c;\n            }\n            $6b17f08f738443dc$var$bdg.hExpenseForm.classList.remove(\"hidden\");\n        }\n    },\n    draw: ()=>{\n        let bal = 0, inc = 0, exp = 0, row;\n        $6b17f08f738443dc$var$bdg.hList.innerHTML = \"\";\n        $6b17f08f738443dc$var$bdg.entries.forEach((entry, i)=>{\n            const entryDate = new Date(entry.date);\n            const entryMonth = entryDate.toLocaleString('default', {\n                month: 'long',\n                year: 'numeric'\n            });\n            if (entryMonth === $6b17f08f738443dc$var$bdg.selectedMonth) {\n                if (entry.s == \"+\") {\n                    inc += entry.a;\n                    bal += entry.a;\n                } else {\n                    exp += entry.a;\n                    bal -= entry.a;\n                }\n                row = document.createElement(\"div\");\n                row.className = `entry ${entry.s == \"+\" ? \"income\" : \"expense\"}`;\n                row.innerHTML = `<div class=\"eDel\" onclick=\"bdg.del(${i})\">X</div>\n        <div class=\"eTxt\">${entry.t || entry.source}</div>\n        <div class=\"eCat\">${entry.c || \"\"}</div>\n        <div class=\"eAmt\">$${parseFloat(entry.a).toFixed(2)}</div>\n        <div class=\"eEdit\" onclick=\"bdg.toggle(${i})\">&#9998;</div>`;\n                $6b17f08f738443dc$var$bdg.hList.appendChild(row);\n            }\n        });\n        $6b17f08f738443dc$var$bdg.hBal.innerHTML = bal < 0 ? `-$${Math.abs(bal).toFixed(2)}` : `$${bal.toFixed(2)}`;\n        $6b17f08f738443dc$var$bdg.hInc.innerHTML = `$${inc.toFixed(2)}`;\n        $6b17f08f738443dc$var$bdg.hExp.innerHTML = `$${exp.toFixed(2)}`;\n    },\n    saveIncome: ()=>{\n        let data = {\n            s: \"+\",\n            t: \"\",\n            a: parseFloat($6b17f08f738443dc$var$bdg.fIncomeAmt.value),\n            c: \"\",\n            source: $6b17f08f738443dc$var$bdg.fIncomeSource.value,\n            date: new Date().toISOString()\n        };\n        if ($6b17f08f738443dc$var$bdg.fIncomeID.value == \"\") $6b17f08f738443dc$var$bdg.entries.push(data); // Add new income entry\n        else $6b17f08f738443dc$var$bdg.entries[parseInt($6b17f08f738443dc$var$bdg.fIncomeID.value)] = data; // Update existing income entry\n        $6b17f08f738443dc$var$bdg.toggleIncome(false);\n        $6b17f08f738443dc$var$bdg.draw();\n        return false;\n    },\n    saveExpense: ()=>{\n        let data = {\n            s: \"-\",\n            t: $6b17f08f738443dc$var$bdg.fExpenseTxt.value,\n            a: parseFloat($6b17f08f738443dc$var$bdg.fExpenseAmt.value),\n            c: $6b17f08f738443dc$var$bdg.fExpenseCategory.value,\n            source: \"\",\n            date: new Date().toISOString()\n        };\n        if ($6b17f08f738443dc$var$bdg.fExpenseID.value == \"\") $6b17f08f738443dc$var$bdg.entries.push(data); // Add new expense entry\n        else $6b17f08f738443dc$var$bdg.entries[parseInt($6b17f08f738443dc$var$bdg.fExpenseID.value)] = data; // Update existing expense entry\n        $6b17f08f738443dc$var$bdg.toggleExpense(false);\n        $6b17f08f738443dc$var$bdg.draw();\n        return false;\n    },\n    del: (id)=>{\n        if (confirm(\"Delete entry?\")) {\n            $6b17f08f738443dc$var$bdg.entries.splice(id, 1); // Delete the entry from the in-memory list\n            $6b17f08f738443dc$var$bdg.draw(); // Redraw the updated list\n        }\n    }\n};\nwindow.onload = $6b17f08f738443dc$var$bdg.init;\n\n\n//# sourceMappingURL=index.68dd7126.js.map\n","let bdg = {\n  data: null,\n  hBal: null,\n  hInc: null,\n  hExp: null,\n  hList: null,\n  hIncomeForm: null,\n  hExpenseForm: null,\n  fIncomeID: null,\n  fIncomeSource: null,\n  fIncomeAmt: null,\n  fExpenseID: null,\n  fExpenseTxt: null,\n  fExpenseAmt: null,\n  fExpenseCategory: null,\n  selectedMonth: null,\n  entries: [],  // Change here: in-memory data, no longer using localStorage\n\n  init: () => {\n    bdg.hBal = document.getElementById(\"balanceAm\");\n    bdg.hInc = document.getElementById(\"incomeAm\");\n    bdg.hExp = document.getElementById(\"expenseAm\");\n    bdg.hList = document.getElementById(\"list\");\n    bdg.hIncomeForm = document.getElementById(\"incomeForm\");\n    bdg.hExpenseForm = document.getElementById(\"expenseForm\");\n    bdg.fIncomeID = document.getElementById(\"incomeFormID\");\n    bdg.fIncomeSource = document.getElementById(\"incomeFormSource\");\n    bdg.fIncomeAmt = document.getElementById(\"incomeFormAmt\");\n    bdg.fExpenseID = document.getElementById(\"expenseFormID\");\n    bdg.fExpenseTxt = document.getElementById(\"expenseFormTxt\");\n    bdg.fExpenseAmt = document.getElementById(\"expenseFormAmt\");\n    bdg.fExpenseCategory = document.getElementById(\"expenseFormCategory\");\n\n    // Use current month logic from previous solution\n    const monthSelect = document.getElementById(\"monthSelect\");\n    const currentDate = new Date();\n    const currentMonth = currentDate.toLocaleString('default', { month: 'long', year: 'numeric' });\n\n    const months = [];\n    for (let i = 0; i < 12; i++) {\n      const month = new Date(currentDate.getFullYear(), i);\n      const monthString = month.toLocaleString('default', { month: 'long', year: 'numeric' });\n      months.push(monthString);\n    }\n\n    monthSelect.innerHTML = '';\n    months.forEach(month => {\n      const option = document.createElement('option');\n      option.value = month;\n      option.textContent = month;\n      monthSelect.appendChild(option);\n    });\n\n    monthSelect.value = currentMonth;\n    bdg.selectedMonth = currentMonth;\n\n    monthSelect.addEventListener(\"change\", (e) => {\n      bdg.selectedMonth = e.target.value;\n      bdg.draw(); \n    });\n\n    bdg.draw();  // Draw entries for the selected month\n  },\n\n  toggleIncome: (id) => {\n    console.log(\"Toggle income function called with id:\", id);\n    if (id === false) {\n      bdg.fIncomeID.value = \"\";\n      bdg.fIncomeSource.value = \"\";\n      bdg.fIncomeAmt.value = \"\";\n      bdg.hIncomeForm.classList.add(\"hidden\");\n    } else {\n      if (Number.isInteger(id)) {\n        bdg.fIncomeID.value = id;\n        bdg.fIncomeSource.value = bdg.entries[id].source;\n        bdg.fIncomeAmt.value = bdg.entries[id].a;\n      }\n      bdg.hIncomeForm.classList.remove(\"hidden\");\n    }\n  },\n\n  toggleExpense: (id) => {\n    console.log(\"Toggle expense function called with id:\", id);\n    if (id === false) {\n      bdg.fExpenseID.value = \"\";\n      bdg.fExpenseTxt.value = \"\";\n      bdg.fExpenseAmt.value = \"\";\n      bdg.fExpenseCategory.value = \"needs\";\n      bdg.hExpenseForm.classList.add(\"hidden\");\n    } else {\n      if (Number.isInteger(id)) {\n        bdg.fExpenseID.value = id;\n        bdg.fExpenseTxt.value = bdg.entries[id].t;\n        bdg.fExpenseAmt.value = bdg.entries[id].a;\n        bdg.fExpenseCategory.value = bdg.entries[id].c;\n      }\n      bdg.hExpenseForm.classList.remove(\"hidden\");\n    }\n  },\n\n  draw: () => {\n    let bal = 0, inc = 0, exp = 0, row;\n\n    bdg.hList.innerHTML = \"\";\n    bdg.entries.forEach((entry, i) => {\n      const entryDate = new Date(entry.date);\n      const entryMonth = entryDate.toLocaleString('default', { month: 'long', year: 'numeric' });\n      if (entryMonth === bdg.selectedMonth) {\n        if (entry.s == \"+\") {\n          inc += entry.a;\n          bal += entry.a;\n        } else {\n          exp += entry.a;\n          bal -= entry.a;\n        }\n        row = document.createElement(\"div\");\n        row.className = `entry ${entry.s == \"+\" ? \"income\" : \"expense\"}`;\n        row.innerHTML = `<div class=\"eDel\" onclick=\"bdg.del(${i})\">X</div>\n        <div class=\"eTxt\">${entry.t || entry.source}</div>\n        <div class=\"eCat\">${entry.c || \"\"}</div>\n        <div class=\"eAmt\">$${parseFloat(entry.a).toFixed(2)}</div>\n        <div class=\"eEdit\" onclick=\"bdg.toggle(${i})\">&#9998;</div>`;\n        bdg.hList.appendChild(row);\n      }\n    });\n\n    bdg.hBal.innerHTML = bal < 0 ? `-$${Math.abs(bal).toFixed(2)}` : `$${bal.toFixed(2)}`;\n    bdg.hInc.innerHTML = `$${inc.toFixed(2)}`;\n    bdg.hExp.innerHTML = `$${exp.toFixed(2)}`;\n  },\n\n  saveIncome: () => {\n    let data = {\n      s: \"+\",\n      t: \"\",  // Income doesn't have a description, so it's left empty\n      a: parseFloat(bdg.fIncomeAmt.value),\n      c: \"\",\n      source: bdg.fIncomeSource.value,\n      date: new Date().toISOString()\n    };\n\n    if (bdg.fIncomeID.value == \"\") {\n      bdg.entries.push(data);  // Add new income entry\n    } else {\n      bdg.entries[parseInt(bdg.fIncomeID.value)] = data;  // Update existing income entry\n    }\n\n    bdg.toggleIncome(false);\n    bdg.draw();\n    return false;\n  },\n\n  saveExpense: () => {\n    let data = {\n      s: \"-\",\n      t: bdg.fExpenseTxt.value,  // Description for the expense\n      a: parseFloat(bdg.fExpenseAmt.value),\n      c: bdg.fExpenseCategory.value,  // Category for the expense\n      source: \"\",\n      date: new Date().toISOString()\n    };\n\n    if (bdg.fExpenseID.value == \"\") {\n      bdg.entries.push(data);  // Add new expense entry\n    } else {\n      bdg.entries[parseInt(bdg.fExpenseID.value)] = data;  // Update existing expense entry\n    }\n\n    bdg.toggleExpense(false);\n    bdg.draw();\n    return false;\n  },\n\n  del: (id) => {\n    if (confirm(\"Delete entry?\")) {\n      bdg.entries.splice(id, 1);  // Delete the entry from the in-memory list\n      bdg.draw();  // Redraw the updated list\n    }\n  }\n};\n\nwindow.onload = bdg.init;\n"],"names":["$6b17f08f738443dc$var$bdg","data","hBal","hInc","hExp","hList","hIncomeForm","hExpenseForm","fIncomeID","fIncomeSource","fIncomeAmt","fExpenseID","fExpenseTxt","fExpenseAmt","fExpenseCategory","selectedMonth","entries","init","document","getElementById","monthSelect","currentDate","Date","currentMonth","toLocaleString","month","year","months","i","monthString","getFullYear","push","innerHTML","forEach","option","createElement","value","textContent","appendChild","addEventListener","e","target","draw","toggleIncome","id","console","log","classList","add","Number","isInteger","source","a","remove","toggleExpense","t","c","bal","inc","exp","row","entry","entryDate","date","s","className","parseFloat","toFixed","Math","abs","saveIncome","toISOString","parseInt","saveExpense","del","confirm","splice","window","onload"],"version":3,"file":"index.68dd7126.js.map"}